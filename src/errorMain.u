{{
  {errorStatus.main} is the entry point function for the case where the student submits non-compiling code, resulting in the results.json file not being written with failing test data. This script should be run in the event that the results file failed to be created. It parses the transcript error output and creates a json file.
}}
errorStatus.main : '{IO,Exception}()
errorStatus.main _ =
  use FilePath /
  solutionsDir = IO.getEnv "solution_dir" |> FilePath
  transcriptFailure = solutionsDir / ".meta" / "testLoader.output.md"
  transcriptOutput = readFileUtf8 transcriptFailure
  messageBody = errorStatus.getTranscriptError transcriptOutput
  testFileJson = toTestFile messageBody |> toJson
  filePath = IO.getEnv "results_file" |> FilePath
  writeFileUtf8 filePath (Json.toText testFileJson)

{{
  {toTestFile} transforms the failed transcript message into the {type TestFile} data type.

  Currently the only version of the spec we support is {Version.Two}
}}
errorStatus.toTestFile : Text -> TestFile
errorStatus.toTestFile message =
  TestFile.TestFile (testRunner.Version.Two) (Status.Error) (Some (testRunner.Message.Message message)) None

{{
  {getTranscriptError} uses the current convention that the transcript will create a failure message as its last step when given non-compiling code. This message can then be used in the {Status.Error} case for the output json testing file.

  Changes in this error message convention are unlikely, and will only happen when new versions of the UCM tool are released.

  In the improbable event that the solution or test uses our transcript failure delimter 🛑 as a string or function name somewhere, the transcript output text as a whole will be used as the failure message.
}}
errorStatus.getTranscriptError : Text -> Text
errorStatus.getTranscriptError fileText =
  backupErrorMsg = "🧐 Something went wrong. The output produced is below: \n\n" Text.++ fileText
  splitText = Text.split ?🛑 fileText
  if List.size splitText === 2 then
    stanzaError = splitText |> List.last
    errorChars = Optional.map toCharList stanzaError
    sanitizeMsg = "\n\nThe transcript failed due to an error in the stanza above. The error is:" |> toCharList
    Optional.flatMap (List.stripPrefix sanitizeMsg) errorChars |>
      Optional.map fromCharList |>
      Optional.getOrElse backupErrorMsg
  else backupErrorMsg
