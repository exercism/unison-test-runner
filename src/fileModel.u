{{
{type testRunner.Version} represents the version of the API spec that the JSON output file adheres to

{Version.One} For tracks which test runner cannot provide information on individual tests.

{Version.Two} For tracks which test runner can output individual test information. Minimal required version for tracks with Concept Exercises.

{Version.Three}For tracks which test runner can link individual tests to a task. Typically used for concept exercises
}}
unique type testRunner.Version = One | Two | Three

testRunner.Version.toJson : testRunner.Version -> Json
testRunner.Version.toJson = cases
  Version.One -> Json.nat 1
  Version.Two -> Json.nat 2
  Version.Three -> Json.nat 3

{{
  {type testRunner.Status} can represent the overall status of the test suite results and/or the individual status of a test result.

  If any individual tests fail, the overall result must be {Status.Fail}.

  Note that {Status.Error} won't be reachable as it's only generated for non-compiling code. }}
unique type testRunner.Status = Pass | Fail | Error

testRunner.Status.toJson : testRunner.Status -> Json
testRunner.Status.toJson = cases
  Status.Pass -> Json.text "pass"
  Status.Fail -> Json.text "fail"
  Status.Error -> Json.text "error"

{{
  {type testRunner.Message} represents the message that a user should receive about their test results individually or overall, if individual test results are not available.
}}
unique type testRunner.Message = Message Text

testRunner.Message.toJson : Message -> Json
testRunner.Message.toJson = cases
  Message t -> Json.text t

{{A human readable test name}}
unique type testRunner.Name = Name Text

testRunner.Name.toJson : Name -> Json
testRunner.Name.toJson = cases
  Name n -> Json.text n

{{
  The code which comprises the actual test that the user sees.

  We can omit this until we have better language introspection capabilities.
}}
unique type testRunner.TestCode = TestCode Text

testRunner.TestCode.toJson : TestCode -> Json
testRunner.TestCode.toJson = cases
  TestCode code -> Json.text code

{{
  {type Output} is used to store and output anything that a user deliberately outputs for a test, for example, debugging information.

  Must be less than 500 characters.
}}
unique type testRunner.Output = Output Text

testRunner.Output.toJson : Output -> Json
testRunner.Output.toJson = cases
  Output output -> Text.take 500 output |> Json.text

{{
  {type TaskID} links a test to a specific task (sub-part of a concept exercise) via the task's ID numeric heading

  Only used for V3 spec, concept exercises
}}
unique type testRunner.TaskID = TaskID Nat

testRunner.TaskID.toJson : TaskID -> Json
testRunner.TaskID.toJson = cases
  TaskID n -> Json.nat n

{{
  Represents a single test

  Tests should be present for V2 and V3 of the spec.
}}
unique type testRunner.Test =
  Test
    testRunner.Name
    (Optional testRunner.TestCode)
    testRunner.Status
    (Optional testRunner.Message)
    (Optional testRunner.Output)
    (Optional testRunner.TaskID)

testRunner.Test.toJson : testRunner.Test -> Json
testRunner.Test.toJson = cases
  testRunner.Test.Test name maybeTestCode status maybeMsg maybeOutput maybeTaskId ->
      nameStr = ("name", Name.toJson name)
      testCode = Optional.map (c -> ("test_code",TestCode.toJson c)) maybeTestCode
      statusStr = ("status", Status.toJson status)
      msgSt = Optional.map (m -> ("message", Message.toJson m)) maybeMsg
      taskIdStr = Optional.map (t -> ("task_id", TaskID.toJson t)) maybeTaskId
      jsonFields = [(Some nameStr), testCode, (Some statusStr), msgSt, taskIdStr] |> List.somes
      Json.object jsonFields

{{Models overall test file structure}}
unique type testRunner.TestFile =
  TestFile
    testRunner.Version
    testRunner.Status
    (Optional testRunner.Message)
    (Optional [testRunner.Test])

testRunner.TestFile.toJson : TestFile -> Json
testRunner.TestFile.toJson = cases
  TestFile version status maybeMessage maybeTests ->
  versStr = ("version", Version.toJson version)
  statStr = ("status", Status.toJson status)
  msgStr = Optional.map (m -> ("message", Message.toJson m)) maybeMessage
  testsStr =
    Optional.map (tests -> List.map Test.toJson tests) maybeTests |>
    Optional.map (array -> ("tests", Json.array array))
  jsonFields = [(Some versStr), (Some statStr), msgStr, testsStr] |> List.somes
  Json.object jsonFields

{{Models json annotation file which we use for test source code and human readable names}}
unique type testRunner.TestAnnotationFile = TestAnnotationFile [testRunner.TestAnnotation]

testRunner.testAnnotationFileDecoder : '{Decoder} TestAnnotationFile
testRunner.testAnnotationFileDecoder = do
  annotations = Decoder.array testAnnotationDecoder
  TestAnnotationFile !annotations

{{Models the json object annotation}}
unique type testRunner.TestAnnotation = TestAnnotation testRunner.Name testRunner.TestCode (Optional testRunner.TaskID)

testRunner.TestAnnotation.toJson = cases
  TestAnnotation name code taskId ->
    nameStr = ("name", Name.toJson name)
    codeStr = ("test_code", TestCode.toJson code)
    taskIdStr = Optional.map (id -> ("task_id", TaskID.toJson id)) taskId
    annotationsFields = [(Some nameStr), (Some codeStr), taskIdStr] |> List.somes
    Json.object annotationsFields

testRunner.testAnnotationDecoder : '{Decoder} TestAnnotation
testRunner.testAnnotationDecoder = do
  use object at! optionalAt!
  testCode = at! "test_code" Decoder.text
  name = at! "name" Decoder.text
  taskId = match optionalAt! "task_id" Decoder.nat with
             Some id -> Some (TaskID id)
             None -> None
  TestAnnotation (Name name) (TestCode testCode) taskId
